{"ast":null,"code":"export default (function e(t) {\n  function n(e, t, r) {\n    var a,\n      o = {};\n    if (Array.isArray(e)) return e.concat(t);\n    for (a in e) o[r ? a.toLowerCase() : a] = e[a];\n    for (a in t) {\n      var i = r ? a.toLowerCase() : a,\n        u = t[a];\n      o[i] = i in o && \"object\" == typeof u ? n(o[i], u, \"headers\" == i) : u;\n    }\n    return o;\n  }\n  function r(e, r, a, o, i) {\n    var u = \"string\" != typeof e ? (r = e).url : e,\n      c = {\n        config: r\n      },\n      s = n(t, r),\n      f = {};\n    o = o || s.data, (s.transformRequest || []).map(function (e) {\n      o = e(o, s.headers) || o;\n    }), s.auth && (f.authorization = s.auth), o && \"object\" == typeof o && \"function\" != typeof o.append && \"function\" != typeof o.text && (o = JSON.stringify(o), f[\"content-type\"] = \"application/json\");\n    try {\n      f[s.xsrfHeaderName] = decodeURIComponent(document.cookie.match(RegExp(\"(^|; )\" + s.xsrfCookieName + \"=([^;]*)\"))[2]);\n    } catch (e) {}\n    return s.baseURL && (u = u.replace(/^(?!.*\\/\\/)\\/?/, s.baseURL + \"/\")), s.params && (u += (~u.indexOf(\"?\") ? \"&\" : \"?\") + (s.paramsSerializer ? s.paramsSerializer(s.params) : new URLSearchParams(s.params))), (s.fetch || fetch)(u, {\n      method: (a || s.method || \"get\").toUpperCase(),\n      body: o,\n      headers: n(s.headers, f, !0),\n      credentials: s.withCredentials ? \"include\" : i\n    }).then(function (e) {\n      for (var t in e) \"function\" != typeof e[t] && (c[t] = e[t]);\n      return \"stream\" == s.responseType ? (c.data = e.body, c) : e[s.responseType || \"text\"]().then(function (e) {\n        c.data = e, c.data = JSON.parse(e);\n      }).catch(Object).then(function () {\n        return (s.validateStatus ? s.validateStatus(e.status) : e.ok) ? c : Promise.reject(c);\n      });\n    });\n  }\n  return t = t || {}, r.request = r, r.get = function (e, t) {\n    return r(e, t, \"get\");\n  }, r.delete = function (e, t) {\n    return r(e, t, \"delete\");\n  }, r.head = function (e, t) {\n    return r(e, t, \"head\");\n  }, r.options = function (e, t) {\n    return r(e, t, \"options\");\n  }, r.post = function (e, t, n) {\n    return r(e, n, \"post\", t);\n  }, r.put = function (e, t, n) {\n    return r(e, n, \"put\", t);\n  }, r.patch = function (e, t, n) {\n    return r(e, n, \"patch\", t);\n  }, r.all = Promise.all.bind(Promise), r.spread = function (e) {\n    return e.apply.bind(e, e);\n  }, r.CancelToken = \"function\" == typeof AbortController ? AbortController : Object, r.defaults = t, r.create = e, r;\n})();","map":{"version":3,"names":["e","t","n","r","a","o","Array","isArray","concat","toLowerCase","i","u","url","c","config","s","f","data","transformRequest","map","headers","auth","authorization","append","text","JSON","stringify","xsrfHeaderName","decodeURIComponent","document","cookie","match","RegExp","xsrfCookieName","baseURL","replace","params","indexOf","paramsSerializer","URLSearchParams","fetch","method","toUpperCase","body","credentials","withCredentials","then","responseType","parse","catch","Object","validateStatus","status","ok","Promise","reject","request","get","delete","head","options","post","put","patch","all","bind","spread","apply","CancelToken","AbortController","defaults","create"],"sources":["/home/azibec/Documents/Dev/Personal/shopio/client/node_modules/redaxios/src/index.js"],"sourcesContent":["/**\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @public\n * @typedef Options\n * @property {string} [url] the URL to request\n * @property {'get'|'post'|'put'|'patch'|'delete'|'options'|'head'|'GET'|'POST'|'PUT'|'PATCH'|'DELETE'|'OPTIONS'|'HEAD'} [method=\"get\"] HTTP method, case-insensitive\n * @property {RequestHeaders} [headers] Request headers\n * @property {FormData|string|object} [body] a body, optionally encoded, to send\n * @property {'text'|'json'|'stream'|'blob'|'arrayBuffer'|'formData'|'stream'} [responseType=\"json\"] An encoding to use for the response\n * @property {Record<string,any>|URLSearchParams} [params] querystring parameters\n * @property {(params: Options['params']) => string} [paramsSerializer] custom function to stringify querystring parameters\n * @property {boolean} [withCredentials] Send the request with credentials like cookies\n * @property {string} [auth] Authorization header value to send with the request\n * @property {string} [xsrfCookieName] Pass an Cross-site Request Forgery prevention cookie value as a header defined by `xsrfHeaderName`\n * @property {string} [xsrfHeaderName] The name of a header to use for passing XSRF cookies\n * @property {(status: number) => boolean} [validateStatus] Override status code handling (default: 200-399 is a success)\n * @property {Array<(body: any, headers?: RequestHeaders) => any?>} [transformRequest] An array of transformations to apply to the outgoing request\n * @property {string} [baseURL] a base URL from which to resolve all URLs\n * @property {typeof window.fetch} [fetch] Custom window.fetch implementation\n * @property {any} [data]\n */\n\n/**\n * @public\n * @typedef RequestHeaders\n * @type {{[name: string]: string} | Headers}\n */\n\n/**\n * @public\n * @template T\n * @typedef Response\n * @property {number} status\n * @property {string} statusText\n * @property {Options} config the request configuration\n * @property {T} data the decoded response body\n * @property {Headers} headers\n * @property {boolean} redirect\n * @property {string} url\n * @property {ResponseType} type\n * @property {ReadableStream<Uint8Array> | null} body\n * @property {boolean} bodyUsed\n */\n\n/**\n * @typedef BodylessMethod\n * @type {<T=any>(url: string, config?: Options) => Promise<Response<T>>}\n */\n\n/**\n * @typedef BodyMethod\n * @type {<T=any>(url: string, body?: any, config?: Options) => Promise<Response<T>>}\n */\n\n/**\n * @public\n * @param {Options} [defaults = {}]\n * @returns {redaxios}\n */\nfunction create(defaults) {\n\tdefaults = defaults || {};\n\n\t/**\n\t * @public\n\t * @template T\n\t * @type {(<T = any>(config?: Options) => Promise<Response<T>>) | (<T = any>(url: string, config?: Options) => Promise<Response<T>>)}\n\t */\n\tredaxios.request = redaxios;\n\n\t/** @public @type {BodylessMethod} */\n\tredaxios.get = (url, config) => redaxios(url, config, 'get');\n\n\t/** @public @type {BodylessMethod} */\n\tredaxios.delete = (url, config) => redaxios(url, config, 'delete');\n\n\t/** @public @type {BodylessMethod} */\n\tredaxios.head = (url, config) => redaxios(url, config, 'head');\n\n\t/** @public @type {BodylessMethod} */\n\tredaxios.options = (url, config) => redaxios(url, config, 'options');\n\n\t/** @public @type {BodyMethod} */\n\tredaxios.post = (url, data, config) => redaxios(url, config, 'post', data);\n\n\t/** @public @type {BodyMethod} */\n\tredaxios.put = (url, data, config) => redaxios(url, config, 'put', data);\n\n\t/** @public @type {BodyMethod} */\n\tredaxios.patch = (url, data, config) => redaxios(url, config, 'patch', data);\n\n\t/** @public */\n\tredaxios.all = Promise.all.bind(Promise);\n\n\t/**\n\t * @public\n\t * @template Args, R\n\t * @param {(...args: Args[]) => R} fn\n\t * @returns {(array: Args[]) => R}\n\t */\n\tredaxios.spread = (fn) => /** @type {any} */ (fn.apply.bind(fn, fn));\n\n\t/**\n\t * @private\n\t * @template T, U\n\t * @param {T} opts\n\t * @param {U} [overrides]\n\t * @param {boolean} [lowerCase]\n\t * @returns {{} & (T | U)}\n\t */\n\tfunction deepMerge(opts, overrides, lowerCase) {\n\t\tlet out = /** @type {any} */ ({}),\n\t\t\ti;\n\t\tif (Array.isArray(opts)) {\n\t\t\t// @ts-ignore\n\t\t\treturn opts.concat(overrides);\n\t\t}\n\t\tfor (i in opts) {\n\t\t\tconst key = lowerCase ? i.toLowerCase() : i;\n\t\t\tout[key] = opts[i];\n\t\t}\n\t\tfor (i in overrides) {\n\t\t\tconst key = lowerCase ? i.toLowerCase() : i;\n\t\t\tconst value = /** @type {any} */ (overrides)[i];\n\t\t\tout[key] = key in out && typeof value == 'object' ? deepMerge(out[key], value, key == 'headers') : value;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t * Issues a request.\n\t * @public\n\t * @template T\n\t * @param {string | Options} urlOrConfig\n\t * @param {Options} [config = {}]\n\t * @param {any} [_method] (internal)\n\t * @param {any} [data] (internal)\n\t * @param {never} [_undefined] (internal)\n\t * @returns {Promise<Response<T>>}\n\t */\n\tfunction redaxios(urlOrConfig, config, _method, data, _undefined) {\n\t\tlet url = /** @type {string} */ (typeof urlOrConfig != 'string' ? (config = urlOrConfig).url : urlOrConfig);\n\n\t\tconst response = /** @type {Response<any>} */ ({ config });\n\n\t\t/** @type {Options} */\n\t\tconst options = deepMerge(defaults, config);\n\n\t\t/** @type {RequestHeaders} */\n\t\tconst customHeaders = {};\n\n\t\tdata = data || options.data;\n\n\t\t(options.transformRequest || []).map((f) => {\n\t\t\tdata = f(data, options.headers) || data;\n\t\t});\n\n\t\tif (options.auth) {\n\t\t\tcustomHeaders.authorization = options.auth;\n\t\t}\n\n\t\tif (data && typeof data === 'object' && typeof data.append !== 'function' && typeof data.text !== 'function') {\n\t\t\tdata = JSON.stringify(data);\n\t\t\tcustomHeaders['content-type'] = 'application/json';\n\t\t}\n\n\t\ttry {\n\t\t\t// @ts-ignore providing the cookie name without header name is nonsensical anyway\n\t\t\tcustomHeaders[options.xsrfHeaderName] = decodeURIComponent(\n\t\t\t\t// @ts-ignore accessing match()[2] throws for no match, which is intentional\n\t\t\t\tdocument.cookie.match(RegExp('(^|; )' + options.xsrfCookieName + '=([^;]*)'))[2]\n\t\t\t);\n\t\t} catch (e) {}\n\n\t\tif (options.baseURL) {\n\t\t\turl = url.replace(/^(?!.*\\/\\/)\\/?/, options.baseURL + '/');\n\t\t}\n\n\t\tif (options.params) {\n\t\t\turl +=\n\t\t\t\t(~url.indexOf('?') ? '&' : '?') +\n\t\t\t\t(options.paramsSerializer ? options.paramsSerializer(options.params) : new URLSearchParams(options.params));\n\t\t}\n\n\t\tconst fetchFunc = options.fetch || fetch;\n\n\t\treturn fetchFunc(url, {\n\t\t\tmethod: (_method || options.method || 'get').toUpperCase(),\n\t\t\tbody: data,\n\t\t\theaders: deepMerge(options.headers, customHeaders, true),\n\t\t\tcredentials: options.withCredentials ? 'include' : _undefined\n\t\t}).then((res) => {\n\t\t\tfor (const i in res) {\n\t\t\t\tif (typeof res[i] != 'function') response[i] = res[i];\n\t\t\t}\n\n\t\t\tif (options.responseType == 'stream') {\n\t\t\t\tresponse.data = res.body;\n\t\t\t\treturn response;\n\t\t\t}\n\n\t\t\treturn res[options.responseType || 'text']()\n\t\t\t\t.then((data) => {\n\t\t\t\t\tresponse.data = data;\n\t\t\t\t\t// its okay if this fails: response.data will be the unparsed value:\n\t\t\t\t\tresponse.data = JSON.parse(data);\n\t\t\t\t})\n\t\t\t\t.catch(Object)\n\t\t\t\t.then(() => {\n\t\t\t\t\tconst ok = options.validateStatus ? options.validateStatus(res.status) : res.ok;\n\t\t\t\t\treturn ok ? response : Promise.reject(response);\n\t\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * @public\n\t * @type {AbortController}\n\t */\n\tredaxios.CancelToken = /** @type {any} */ (typeof AbortController == 'function' ? AbortController : Object);\n\n\t/**\n\t * @public\n\t * @type {Options}\n\t */\n\tredaxios.defaults = defaults;\n\n\t/**\n\t * @public\n\t */\n\tredaxios.create = create;\n\n\treturn redaxios;\n}\n\nexport default create();\n"],"mappings":"eAuEA,UAASA,EAAOC,CAAA;EAAA,SAkDNC,EAAUF,CAAA,EAAMC,CAAA,EAAWE,CAAA;IAAA,IAElCC,CAAA;MADGC,CAAA;IAAA,IAEAC,KAAA,CAAMC,OAAA,CAAQP,CAAA,UAEVA,CAAA,CAAKQ,MAAA,CAAOP,CAAA;IAAA,KAEfG,CAAA,IAAKJ,CAAA,EAETK,CAAA,CADYF,CAAA,GAAYC,CAAA,CAAEK,WAAA,KAAgBL,CAAA,IAC/BJ,CAAA,CAAKI,CAAA;IAAA,KAEZA,CAAA,IAAKH,CAAA,EAAW;MAAA,IACdS,CAAA,GAAMP,CAAA,GAAYC,CAAA,CAAEK,WAAA,KAAgBL,CAAA;QACpCO,CAAA,GAA4BV,CAAA,CAAWG,CAAA;MAC7CC,CAAA,CAAIK,CAAA,IAAOA,CAAA,IAAOL,CAAA,IAAuB,mBAATM,CAAA,GAAoBT,CAAA,CAAUG,CAAA,CAAIK,CAAA,GAAMC,CAAA,EAAc,aAAPD,CAAA,IAAoBC,CAAA;IAAA;IAAA,OAE7FN,CAAA;EAAA;EAAA,SAcCF,EAASH,CAAA,EAAaG,CAAA,EAAQC,CAAA,EAASC,CAAA,EAAMK,CAAA;IAAA,IACjDC,CAAA,GAAmD,mBAAfX,CAAA,IAA2BG,CAAA,GAASH,CAAA,EAAaY,GAAA,GAAMZ,CAAA;MAEzFa,CAAA;QAAAC,MAAA,EAA2CX;MAAA;MAG3CY,CAAA,GAAUb,CAAA,CAAUD,CAAA,EAAUE,CAAA;MAG9Ba,CAAA,GAAgB;IAEtBX,CAAA,GAAOA,CAAA,IAAQU,CAAA,CAAQE,IAAA,GAEtBF,CAAA,CAAQG,gBAAA,IAAoB,IAAIC,GAAA,WAAKnB,CAAA;MACrCK,CAAA,GAAOL,CAAA,CAAEK,CAAA,EAAMU,CAAA,CAAQK,OAAA,KAAYf,CAAA;IAAA,IAGhCU,CAAA,CAAQM,IAAA,KACXL,CAAA,CAAcM,aAAA,GAAgBP,CAAA,CAAQM,IAAA,GAGnChB,CAAA,IAAwB,mBAATA,CAAA,IAA4C,qBAAhBA,CAAA,CAAKkB,MAAA,IAA8C,qBAAdlB,CAAA,CAAKmB,IAAA,KACxFnB,CAAA,GAAOoB,IAAA,CAAKC,SAAA,CAAUrB,CAAA,GACtBW,CAAA,CAAc,kBAAkB;IAAA;MAKhCA,CAAA,CAAcD,CAAA,CAAQY,cAAA,IAAkBC,kBAAA,CAEvCC,QAAA,CAASC,MAAA,CAAOC,KAAA,CAAMC,MAAA,CAAO,WAAWjB,CAAA,CAAQkB,cAAA,GAAiB,aAAa;IAAA,CAE9E,QAAOjC,CAAA;IAAA,OAELe,CAAA,CAAQmB,OAAA,KACXvB,CAAA,GAAMA,CAAA,CAAIwB,OAAA,CAAQ,kBAAkBpB,CAAA,CAAQmB,OAAA,GAAU,OAGnDnB,CAAA,CAAQqB,MAAA,KACXzB,CAAA,MACGA,CAAA,CAAI0B,OAAA,CAAQ,OAAO,MAAM,QAC1BtB,CAAA,CAAQuB,gBAAA,GAAmBvB,CAAA,CAAQuB,gBAAA,CAAiBvB,CAAA,CAAQqB,MAAA,IAAU,IAAIG,eAAA,CAAgBxB,CAAA,CAAQqB,MAAA,MAGnFrB,CAAA,CAAQyB,KAAA,IAASA,KAAA,EAElB7B,CAAA,EAAK;MACrB8B,MAAA,GAASrC,CAAA,IAAWW,CAAA,CAAQ0B,MAAA,IAAU,OAAOC,WAAA;MAC7CC,IAAA,EAAMtC,CAAA;MACNe,OAAA,EAASlB,CAAA,CAAUa,CAAA,CAAQK,OAAA,EAASJ,CAAA,GAAe;MACnD4B,WAAA,EAAa7B,CAAA,CAAQ8B,eAAA,GAAkB,YAAYnC;IAAA,GACjDoC,IAAA,WAAM9C,CAAA;MAAA,KACH,IAAMC,CAAA,IAAKD,CAAA,EACM,qBAAVA,CAAA,CAAIC,CAAA,MAAkBY,CAAA,CAASZ,CAAA,IAAKD,CAAA,CAAIC,CAAA;MAAA,OAGxB,YAAxBc,CAAA,CAAQgC,YAAA,IACXlC,CAAA,CAASI,IAAA,GAAOjB,CAAA,CAAI2C,IAAA,EACb9B,CAAA,IAGDb,CAAA,CAAIe,CAAA,CAAQgC,YAAA,IAAgB,UACjCD,IAAA,WAAM9C,CAAA;QACNa,CAAA,CAASI,IAAA,GAAOjB,CAAA,EAEhBa,CAAA,CAASI,IAAA,GAAOQ,IAAA,CAAKuB,KAAA,CAAMhD,CAAA;MAAA,GAE3BiD,KAAA,CAAMC,MAAA,EACNJ,IAAA;QAAA,QACW/B,CAAA,CAAQoC,cAAA,GAAiBpC,CAAA,CAAQoC,cAAA,CAAenD,CAAA,CAAIoD,MAAA,IAAUpD,CAAA,CAAIqD,EAAA,IACjExC,CAAA,GAAWyC,OAAA,CAAQC,MAAA,CAAO1C,CAAA;MAAA;IAAA;EAAA;EAAA,OArJ1CZ,CAAA,GAAWA,CAAA,IAAY,IAOvBE,CAAA,CAASqD,OAAA,GAAUrD,CAAA,EAGnBA,CAAA,CAASsD,GAAA,aAAOzD,CAAA,EAAKC,CAAA;IAAA,OAAWE,CAAA,CAASH,CAAA,EAAKC,CAAA,EAAQ;EAAA,GAGtDE,CAAA,CAASuD,MAAA,aAAU1D,CAAA,EAAKC,CAAA;IAAA,OAAWE,CAAA,CAASH,CAAA,EAAKC,CAAA,EAAQ;EAAA,GAGzDE,CAAA,CAASwD,IAAA,aAAQ3D,CAAA,EAAKC,CAAA;IAAA,OAAWE,CAAA,CAASH,CAAA,EAAKC,CAAA,EAAQ;EAAA,GAGvDE,CAAA,CAASyD,OAAA,aAAW5D,CAAA,EAAKC,CAAA;IAAA,OAAWE,CAAA,CAASH,CAAA,EAAKC,CAAA,EAAQ;EAAA,GAG1DE,CAAA,CAAS0D,IAAA,aAAQ7D,CAAA,EAAKC,CAAA,EAAMC,CAAA;IAAA,OAAWC,CAAA,CAASH,CAAA,EAAKE,CAAA,EAAQ,QAAQD,CAAA;EAAA,GAGrEE,CAAA,CAAS2D,GAAA,aAAO9D,CAAA,EAAKC,CAAA,EAAMC,CAAA;IAAA,OAAWC,CAAA,CAASH,CAAA,EAAKE,CAAA,EAAQ,OAAOD,CAAA;EAAA,GAGnEE,CAAA,CAAS4D,KAAA,aAAS/D,CAAA,EAAKC,CAAA,EAAMC,CAAA;IAAA,OAAWC,CAAA,CAASH,CAAA,EAAKE,CAAA,EAAQ,SAASD,CAAA;EAAA,GAGvEE,CAAA,CAAS6D,GAAA,GAAMV,OAAA,CAAQU,GAAA,CAAIC,IAAA,CAAKX,OAAA,GAQhCnD,CAAA,CAAS+D,MAAA,aAAUlE,CAAA;IAAA,OAA2BA,CAAA,CAAGmE,KAAA,CAAMF,IAAA,CAAKjE,CAAA,EAAIA,CAAA;EAAA,GAuHhEG,CAAA,CAASiE,WAAA,GAA4D,qBAAnBC,eAAA,GAAgCA,eAAA,GAAkBnB,MAAA,EAMpG/C,CAAA,CAASmE,QAAA,GAAWrE,CAAA,EAKpBE,CAAA,CAASoE,MAAA,GAASvE,CAAA,EAEXG,CAAA;AAAA,CAGO"},"metadata":{},"sourceType":"module","externalDependencies":[]}